# -*- coding: utf-8 -*-
# Generated by Django 1.11.29 on 2020-07-16 18:50
from __future__ import unicode_literals

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ClUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(db_index=True, error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('chahub_timestamp', models.DateTimeField(blank=True, null=True)),
                ('chahub_data_hash', models.TextField(blank=True, null=True)),
                ('chahub_needs_retry', models.BooleanField(default=False)),
                ('participation_status_updates', models.BooleanField(default=True)),
                ('organizer_status_updates', models.BooleanField(default=True)),
                ('organizer_direct_message_updates', models.BooleanField(default=True)),
                ('email_on_submission_finished_successfully', models.BooleanField(default=False)),
                ('allow_forum_notifications', models.BooleanField(default=True)),
                ('allow_admin_status_updates', models.BooleanField(default=True)),
                ('newsletter_opt_in', models.BooleanField(default=False)),
                ('organization_or_affiliation', models.CharField(blank=True, max_length=255, null=True)),
                ('team_name', models.CharField(blank=True, max_length=64, null=True)),
                ('team_members', models.TextField(blank=True, null=True)),
                ('method_name', models.CharField(blank=True, max_length=20, null=True)),
                ('method_description', models.TextField(blank=True, null=True)),
                ('project_url', models.URLField(blank=True, null=True)),
                ('publication_url', models.URLField(blank=True, null=True)),
                ('bibtex', models.TextField(blank=True, null=True)),
                ('contact_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('rabbitmq_queue_limit', models.PositiveIntegerField(blank=True, default=5)),
                ('rabbitmq_username', models.CharField(blank=True, max_length=36, null=True)),
                ('rabbitmq_password', models.CharField(blank=True, max_length=36, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
